#pragma once

#include "float3.ih"
#include "util.ih"

struct ISPCTexture2D {
	int width;
	int height;
	int channels;
	const uint8_t *uniform data;
};

inline float4 get_texel(const ISPCTexture2D *tex, const int2 px) {
	float4 color = make_float4(0.f);
	color.x = tex->data[((px.y * tex->width) + px.x) * tex->channels] / 255.f;
	if (tex->channels >= 2) {
		color.y = tex->data[((px.y * tex->width) + px.x) * tex->channels + 1] / 255.f;
	}
	if (tex->channels >= 3) {
		color.z = tex->data[((px.y * tex->width) + px.x) * tex->channels + 2] / 255.f;
	}
	if (tex->channels == 4) {
		color.w = tex->data[((px.y * tex->width) + px.x) * tex->channels + 3] / 255.f;
	}
	return color;
}

inline float get_texel_channel(const ISPCTexture2D *tex, const int2 px, const int channel) {
    return tex->data[((px.y * tex->width) + px.x) * tex->channels + channel] / 255.f;
}

inline int2 get_wrapped_texcoord(const ISPCTexture2D *tex, int x, int y) {
	int w = tex->width;
	int h = tex->height;
	// TODO: maybe support other wrap modes?
	return make_int2(mod(x, w), mod(y, h));
}

float4 texture(const ISPCTexture2D *tex, const float2 uv) {
	const float ux = uv.x * tex->width - 0.5;
	const float uy = uv.y * tex->height - 0.5;

	const float tx = ux - floor(ux);
	const float ty = uy - floor(uy);

	const int2 t00 = get_wrapped_texcoord(tex, ux, uy);
	const int2 t10 = get_wrapped_texcoord(tex, ux + 1, uy);
	const int2 t01 = get_wrapped_texcoord(tex, ux, uy + 1);
	const int2 t11 = get_wrapped_texcoord(tex, ux + 1, uy + 1);
		
	const float4 s00 = get_texel(tex, t00);
	const float4 s10 = get_texel(tex, t10);
	const float4 s01 = get_texel(tex, t01);
	const float4 s11 = get_texel(tex, t11);

	return s00 * (1.f - tx) * (1.f - ty)
		+ s10 * tx * (1.f - ty)
		+ s01 * (1.f - tx) * ty
		+ s11 * tx * ty;
}

float texture_channel(const ISPCTexture2D *tex, const float2 uv, const int channel) {
	const float ux = uv.x * tex->width - 0.5;
	const float uy = uv.y * tex->height - 0.5;

	const float tx = ux - floor(ux);
	const float ty = uy - floor(uy);

	const int2 t00 = get_wrapped_texcoord(tex, ux, uy);
	const int2 t10 = get_wrapped_texcoord(tex, ux + 1, uy);
	const int2 t01 = get_wrapped_texcoord(tex, ux, uy + 1);
	const int2 t11 = get_wrapped_texcoord(tex, ux + 1, uy + 1);
		
	const float s00 = get_texel_channel(tex, t00, channel);
	const float s10 = get_texel_channel(tex, t10, channel);
	const float s01 = get_texel_channel(tex, t01, channel);
	const float s11 = get_texel_channel(tex, t11, channel);

	return s00 * (1.f - tx) * (1.f - ty)
		+ s10 * tx * (1.f - ty)
		+ s01 * (1.f - tx) * ty
		+ s11 * tx * ty;
}


